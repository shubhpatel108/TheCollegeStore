<div class="smart-wrap">
    <div class="smart-forms smart-container wrap-3">
      
      <div class="form-header header-black">
          <h4><i class="fa "></i><center>Sign In</center></h4>
      </div>
      
      <div class="form-body theme-black">

		<%= form_for(resource, as: resource_name, url: session_path(resource_name), :validate => true) do |f| %>
	  		<div class="section">
          		<label for="email" class="field prepend-icon">
            	<%= f.email_field :email,:placeholder => 'Email', autofocus: true, :validate => {:uniqueness => false}, :class=>'gui-input', :name=>'email' %>
        	  	</label>
        	</div><!-- end section -->

	        <div class="section">
	          <label for="password" class="field prepend-icon">
	            <%= f.password_field :password, :placeholder => 'Password', autocomplete: "off", :class=>'gui-input', :name=>'password' %>
	          </label>
	        </div><!-- end section -->
		    	
		    <div class="section">
		    	<% if devise_mapping.rememberable? -%>
		      	<%= f.check_box :remember_me %> <%= f.label :remember_me %>
		    </div>
		    <% end%>
		    <div class="section">
		    	<%= f.submit "Sign in", :class =>'button btn-black' %>
		    </div>
		<% end %>

<%= render "devise/shared/links_signin" %>
</div>
</div>
</div>

<script type="text/javascript">
    
    
        $(function() {
        

                
                /* @custom validation method (smartCaptcha) 
                ------------------------------------------------------------------ */
                    
                // $.validator.methods.smartCaptcha = function(value, element, param) {
                //      return value == param;
                // };
                        
                $( "#new_user" ).validate({
                
                        /* @validation states + elements 
                        ------------------------------------------- */
                        
                        errorClass: "state-error1",
                        validClass: "state-success1",
                        errorElement: "em1",
                        
                        /* @validation rules 
                        ------------------------------------------ */
                            
                        rules: {
                                email: {
                                        required: true,
                                        email: true
                                },
                                
                                password:{
                                  required: true,
                                  minlength: 6,
                                  maxlength: 16           
                                }

                        },
                        
                        /* @validation error messages 
                        ---------------------------------------------- */
                            
                        messages:{
                                email: {
                                        required: 'Please Enter the Email',
                                        email: 'The text entered is not an Email'
                                }

                                :password {
                                  required: 'Please Enter Password',
                                  minlength: 'Password should be minimum of 6 characters',
                                  maxlength: 'Password cannot be longer than 16 characters'
                                }
                                 
                        },

                        /* @validation highlighting + error placement  
                        ---------------------------------------------------- */ 
                        
                        highlight: function(element, errorClass, validClass) {
                                $(element).closest('.field').addClass(errorClass).removeClass(validClass);
                        },
                        unhighlight: function(element, errorClass, validClass) {
                                $(element).closest('.field').removeClass(errorClass).addClass(validClass);
                        },
                        errorPlacement: function(error, element) {
                           if (element.is(":radio") || element.is(":checkbox")) {
                                    element.closest('.option-group').after(error);
                           } else {
                                    error.insertAfter(element.parent());
                           }
                        }
                                
                });     
        
        });             
    
    
</script>
